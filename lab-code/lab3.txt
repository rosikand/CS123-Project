├── .gitignore
├── lab_3.launch.py
├── lab_3.py
└── lab_3.yaml


/.gitignore:
--------------------------------------------------------------------------------
1 | .DS_Store
2 | __pycache__
3 | 


--------------------------------------------------------------------------------
/lab_3.launch.py:
--------------------------------------------------------------------------------
  1 | # Copyright 2021 Stogl Robotics Consulting UG (haftungsbeschränkt)
  2 | #
  3 | # Licensed under the Apache License, Version 2.0 (the "License");
  4 | # you may not use this file except in compliance with the License.
  5 | # You may obtain a copy of the License at
  6 | #
  7 | #     http://www.apache.org/licenses/LICENSE-2.0
  8 | #
  9 | # Unless required by applicable law or agreed to in writing, software
 10 | # distributed under the License is distributed on an "AS IS" BASIS,
 11 | # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 12 | # See the License for the specific language governing permissions and
 13 | # limitations under the License.
 14 | 
 15 | 
 16 | from launch import LaunchDescription
 17 | from launch.actions import RegisterEventHandler
 18 | from launch.event_handlers import OnProcessExit
 19 | from launch.substitutions import Command, FindExecutable, PathJoinSubstitution
 20 | 
 21 | from launch_ros.actions import Node
 22 | from launch_ros.substitutions import FindPackageShare
 23 | 
 24 | 
 25 | def generate_launch_description():
 26 |     # Get URDF via xacro
 27 |     robot_description_content = Command(
 28 |         [
 29 |             PathJoinSubstitution([FindExecutable(name="xacro")]),
 30 |             " ",
 31 |             PathJoinSubstitution(
 32 |                 [
 33 | #                    FindPackageShare("control_board_hardware_interface"),
 34 |                     # "/home/pi/ros2_ws/src/control_board_hardware_interface",
 35 |                     # "test",
 36 |                     # "test_state_publisher.urdf.xacro",
 37 |                     "/home/pi/ros2_ws/src/pupper_v3_description",
 38 |                     "description",
 39 |                     "pupper_v3.urdf.xacro",
 40 |                 ]
 41 |             ),
 42 |         ]
 43 |     )
 44 |     robot_description = {"robot_description": robot_description_content}
 45 | 
 46 |     robot_controllers = PathJoinSubstitution(
 47 |         [
 48 | #            FindPackageShare("control_board_hardware_interface"),
 49 |             "/home/pi/lab_3",
 50 |             "lab_3.yaml",
 51 |         ]
 52 |     )
 53 |     # rviz_config_file = PathJoinSubstitution(
 54 |     #     [FindPackageShare("ros2_control_demo_example_1"), "rviz", "rrbot.rviz"]
 55 |     # )
 56 | 
 57 |     control_node = Node(
 58 |         package="controller_manager",
 59 |         executable="ros2_control_node",
 60 |         parameters=[robot_description, robot_controllers],
 61 |         output="both",
 62 |     )
 63 |     robot_state_pub_node = Node(
 64 |         package="robot_state_publisher",
 65 |         executable="robot_state_publisher",
 66 |         output="both",
 67 |         parameters=[robot_description],
 68 |     )
 69 |     # rviz_node = Node(
 70 |     #     package="rviz2",
 71 |     #     executable="rviz2",
 72 |     #     name="rviz2",
 73 |     #     output="log",
 74 |     #     arguments=["-d", rviz_config_file],
 75 |     # )
 76 | #    joy_node = Node(
 77 | #        package="joy_linux",
 78 | #        executable="joy_linux_node",
 79 | #        output="both",
 80 | #    )
 81 | 
 82 |     joint_state_broadcaster_spawner = Node(
 83 |         package="controller_manager",
 84 |         executable="spawner",
 85 |         arguments=["joint_state_broadcaster", "--controller-manager", "/controller_manager", "--controller-manager-timeout", "30"],
 86 |     )
 87 | 
 88 |     imu_sensor_broadcaster_spawner = Node(
 89 |         package="controller_manager",
 90 |         executable="spawner",
 91 |         arguments=["imu_sensor_broadcaster", "--controller-manager", "/controller_manager", "--controller-manager-timeout", "30"],
 92 |     )
 93 | 
 94 |     robot_controller_spawner = Node(
 95 |         package="controller_manager",
 96 |         executable="spawner",
 97 |         arguments=["forward_command_controller", "--controller-manager", "/controller_manager", "--controller-manager-timeout", "30"],
 98 |     )
 99 | 
100 |     # Delay rviz start after `joint_state_broadcaster`
101 |     # delay_rviz_after_joint_state_broadcaster_spawner = RegisterEventHandler(
102 |     #     event_handler=OnProcessExit(
103 |     #         target_action=joint_state_broadcaster_spawner,
104 |     #         on_exit=[rviz_node],
105 |     #     )
106 |     # )
107 | 
108 |     # delay_joint_state_broadcaster_spawner_after_control_node = RegisterEventHandler(
109 |     #     event_handler=OnProcessExit(
110 |     #         target_action=joint_state_broadcaster_spawner,
111 |     #         on_exit=[control_node],
112 |     #     )
113 |     # )
114 | 
115 |     # Delay start of robot_controller after `joint_state_broadcaster`
116 |     delay_robot_controller_spawner_after_joint_state_broadcaster_spawner = RegisterEventHandler(
117 |         event_handler=OnProcessExit(
118 |             target_action=joint_state_broadcaster_spawner,
119 |             on_exit=[robot_controller_spawner],
120 |         )
121 |     )
122 | 
123 |     nodes = [
124 |         control_node,
125 |  #       joy_node,
126 |         robot_state_pub_node,
127 |         joint_state_broadcaster_spawner,
128 |         imu_sensor_broadcaster_spawner,
129 |         # delay_rviz_after_joint_state_broadcaster_spawner,
130 |         delay_robot_controller_spawner_after_joint_state_broadcaster_spawner,
131 |     ]
132 | 
133 |     return LaunchDescription(nodes)
134 | 


--------------------------------------------------------------------------------
/lab_3.py:
--------------------------------------------------------------------------------
  1 | import rclpy
  2 | from rclpy.node import Node
  3 | from sensor_msgs.msg import JointState
  4 | from std_msgs.msg import Float64MultiArray
  5 | import numpy as np
  6 | np.set_printoptions(precision=3, suppress=True)
  7 | 
  8 | class InverseKinematics(Node):
  9 | 
 10 |     def __init__(self):
 11 |         super().__init__('inverse_kinematics')
 12 |         self.joint_subscription = self.create_subscription(
 13 |             JointState,
 14 |             'joint_states',
 15 |             self.listener_callback,
 16 |             10)
 17 |         self.joint_subscription  # prevent unused variable warning
 18 | 
 19 |         self.command_publisher = self.create_publisher(
 20 |             Float64MultiArray,
 21 |             '/forward_command_controller/commands',
 22 |             10
 23 |         )
 24 | 
 25 |         self.pd_timer_period = 1.0 / 200  # 200 Hz
 26 |         self.ik_timer_period = 1.0 / 20   # 10 Hz
 27 |         self.pd_timer = self.create_timer(self.pd_timer_period, self.pd_timer_callback)
 28 |         self.ik_timer = self.create_timer(self.ik_timer_period, self.ik_timer_callback)
 29 | 
 30 |         self.joint_positions = None
 31 |         self.joint_velocities = None
 32 |         self.target_joint_positions = None
 33 | 
 34 |         self.ee_triangle_positions = np.array([
 35 |             [0.05, 0.0, -0.12],  # Touchdown
 36 |             [-0.05, 0.0, -0.12], # Liftoff
 37 |             [0.0, 0.0, -0.06]    # Mid-swing
 38 |         ])
 39 | 
 40 |         center_to_rf_hip = np.array([0.07500, -0.08350, 0])
 41 |         self.ee_triangle_positions = self.ee_triangle_positions + center_to_rf_hip
 42 |         self.current_target = 0
 43 |         self.t = 0
 44 | 
 45 |     def listener_callback(self, msg):
 46 |         joints_of_interest = ['leg_front_r_1', 'leg_front_r_2', 'leg_front_r_3']
 47 |         self.joint_positions = np.array([msg.position[msg.name.index(joint)] for joint in joints_of_interest])
 48 |         self.joint_velocities = np.array([msg.velocity[msg.name.index(joint)] for joint in joints_of_interest])
 49 | 
 50 |     def forward_kinematics(self, theta1, theta2, theta3):
 51 | 
 52 |         def rotation_x(angle):
 53 |             # rotation about the x-axis implemented for you
 54 |             return np.array([
 55 |                 [1, 0, 0, 0],
 56 |                 [0, np.cos(angle), -np.sin(angle), 0],
 57 |                 [0, np.sin(angle), np.cos(angle), 0],
 58 |                 [0, 0, 0, 1]
 59 |             ])
 60 | 
 61 |         def rotation_y(angle):
 62 |             return np.array([
 63 |                 [np.cos(angle), 0, np.sin(angle), 0],
 64 |                 [0, 1, 0, 0],
 65 |                 [-np.sin(angle), 0, np.cos(angle), 0], 
 66 |                 [0, 0, 0, 1]
 67 |             ])
 68 |         
 69 |         def rotation_z(angle):
 70 |             return np.array([
 71 |                 [np.cos(angle), -np.sin(angle), 0, 0], 
 72 |                 [np.sin(angle), np.cos(angle), 0, 0], 
 73 |                 [0, 0, 1, 0], 
 74 |                 [0, 0, 0, 1]
 75 |             ])
 76 | 
 77 |         def translation(x, y, z):
 78 |             return np.array([
 79 |                 [1, 0, 0, x],
 80 |                 [0, 1, 0 ,y],
 81 |                 [0, 0, 1, z],
 82 |                 [0, 0, 0, 1]
 83 |             ])
 84 | 
 85 |         #translation matrices 
 86 | 
 87 |         # T_0_1 (base_link to leg_front_r_1)
 88 |         T_0_1 = translation(0.07500, -0.0445, 0) @ rotation_x(1.57080) @ rotation_z(theta1)
 89 | 
 90 |         # T_1_2 (leg_front_r_1 to leg_front_r_2)
 91 |         ## TODO: Implement the transformation matrix from leg_front_r_1 to leg_front_r_2
 92 |         T_1_2 = translation(0, 0, 0.039) @ rotation_y(-np.pi / 2) @ rotation_z(theta2)
 93 | 
 94 |         # T_2_3 (leg_front_r_2 to leg_front_r_3)
 95 |         ## TODO: Implement the transformation matrix from leg_front_r_2 to leg_front_r_3
 96 |         T_2_3 = translation(0, -0.0494, 0.0685) @ rotation_y(np.pi / 2) @ rotation_z(theta3)
 97 | 
 98 |         # T_3_ee (leg_front_r_3 to end-effector)
 99 |         T_3_ee = translation(0.06231, -0.06216, 0.018)
100 | 
101 |         # TODO: Compute the final transformation. T_0_ee is a concatenation of the previous transformation matrices
102 |         T_0_ee = T_0_1 @ T_1_2 @ T_2_3 @ T_3_ee
103 | 
104 |         # TODO: Extract the end-effector position.
105 |         end_effector_position = T_0_ee[:3, 3] 
106 | 
107 |         return end_effector_position
108 |     
109 | 
110 | 
111 |     def inverse_kinematics(self, target_ee, initial_guess=[2., 2., 2.]):
112 |         def cost_function(theta):
113 |             # Compute the cost function and the L1 norm of the error
114 |             # return the cost and the L1 norm of the error
115 |             ################################################################################################
116 |             # TODO: Implement the cost function
117 |             # HINT: You can use the * notation on a list to "unpack" a list
118 |             ################################################################################################
119 |             
120 |             #get curr ee pos, calc the l1 distance, and then calc cost
121 |             curr_ee = self.forward_kinematics(*theta)
122 |             error = curr_ee - target_ee
123 | 
124 |             l1dist = np.abs(error)
125 |             cost = np.sum(error**2)
126 |             
127 |             return cost, l1dist
128 | 
129 |         def gradient(theta, epsilon=1e-3):
130 |             # return (cost_function(theta + epsilon) - cost_function(theta - epsilon)) / (2*epsilon)
131 | 
132 |             # compute the gradient using finite diff 
133 |             n = len(theta)
134 |             grad = np.zeros(n)
135 |             for i in range(n):
136 |                 theta_plus = theta.copy()
137 |                 theta_plus[i] += epsilon
138 |                 cost_plus, _ = cost_function(theta_plus)
139 | 
140 |                 theta_minus = theta.copy()
141 |                 theta_minus[i] -= epsilon
142 |                 cost_minus, _ = cost_function(theta_minus)
143 | 
144 |                 grad[i] = (cost_plus - cost_minus) / (2 * epsilon)
145 |                     
146 |             return grad
147 |             
148 | 
149 |         theta = np.array(initial_guess)
150 |         learning_rate = 5 # TODO: tune the learning rate
151 |         max_iterations = 10 # TODO: Set the maximum number of iterations
152 |         tolerance = 0.001 #TODO :Set the tolerance for the L1 norm of the error
153 | 
154 |         for _ in range(max_iterations):
155 |             # Update the theta (parameters) using the gradient and the learning rate
156 |             ################################################################################################
157 |             # TODO: Implement the gradient update. Use the cost function you implemented, and use tolerance t
158 |             # to determine if IK has converged
159 |             # TODO (BONUS): Implement the (quasi-)Newton's method instead of finite differences for faster convergence
160 |             ################################################################################################
161 |             cost, l1 = cost_function(theta)
162 | 
163 |             if np.mean(l1) < tolerance: 
164 |                 break
165 |             
166 |             grad = gradient(theta)
167 |             theta -= grad * learning_rate
168 | 
169 |         return theta
170 | 
171 |     def interpolate_triangle(self, t):
172 |         # Intepolate between the three triangle positions in the self.ee_triangle_positions
173 |         # based on the current time t
174 |         ################################################################################################
175 |         # TODO: Implement the interpolation function
176 |         ################################################################################################
177 |         t_mod = t % 3
178 | 
179 |         vertices = self.ee_triangle_positions
180 | 
181 |         if t_mod < 1.0:
182 |             alpha = t_mod
183 |             interpolated = (1-alpha) * vertices[0] + alpha * vertices[1]
184 |         elif t_mod < 2.0:
185 |             alpha = (t_mod - 1.0)
186 |             interpolated = (1-alpha) * vertices[1] + alpha * vertices[2]
187 |         else:
188 |             alpha = (t_mod - 2.0)
189 |             interpolated = (1-alpha) * vertices[2] + alpha * vertices[0]
190 | 
191 |         return interpolated
192 | 
193 |     def ik_timer_callback(self):
194 |         if self.joint_positions is not None:
195 |             target_ee = self.interpolate_triangle(self.t)
196 |             self.target_joint_positions = self.inverse_kinematics(target_ee, self.joint_positions)
197 |             current_ee = self.forward_kinematics(*self.joint_positions)
198 | 
199 |             # update the current time for the triangle interpolation
200 |             ################################################################################################
201 |             # TODO: Implement the time update
202 |             ################################################################################################
203 |             self.t += self.ik_timer_period
204 | 
205 |             self.get_logger().info(f'Target EE: {target_ee}, Current EE: {current_ee}, Target Angles: {self.target_joint_positions}, Target Angles to EE: {self.forward_kinematics(*self.target_joint_positions)}, Current Angles: {self.joint_positions}')
206 | 
207 |     def pd_timer_callback(self):
208 |         if self.target_joint_positions is not None:
209 | 
210 |             command_msg = Float64MultiArray()
211 |             command_msg.data = self.target_joint_positions.tolist()
212 |             self.command_publisher.publish(command_msg)
213 | 
214 | def main():
215 |     rclpy.init()
216 |     inverse_kinematics = InverseKinematics()
217 |     
218 |     try:
219 |         rclpy.spin(inverse_kinematics)
220 |     except KeyboardInterrupt:
221 |         print("Program terminated by user")
222 |     finally:
223 |         # Send zero torques
224 |         zero_torques = Float64MultiArray()
225 |         zero_torques.data = [0.0, 0.0, 0.0]
226 |         inverse_kinematics.command_publisher.publish(zero_torques)
227 |         
228 |         inverse_kinematics.destroy_node()
229 |         rclpy.shutdown()
230 | 
231 | if __name__ == '__main__':
232 |     main()
233 | 


--------------------------------------------------------------------------------
/lab_3.yaml:
--------------------------------------------------------------------------------
 1 | controller_manager:
 2 |   ros__parameters:
 3 |     update_rate: 1000 #  Hz
 4 | 
 5 |     forward_command_controller:
 6 |       type: forward_command_controller/ForwardCommandController
 7 | 
 8 |     joint_state_broadcaster:
 9 |       type: joint_state_broadcaster/JointStateBroadcaster
10 |     
11 |     imu_sensor_broadcaster:
12 |       type: imu_sensor_broadcaster/IMUSensorBroadcaster
13 | 
14 | forward_command_controller:
15 |   ros__parameters:
16 |     joints:
17 |       - leg_front_r_1
18 |       - leg_front_r_2
19 |       - leg_front_r_3
20 |     interface_name: position
21 | 
22 | joint_state_broadcaster:
23 |   ros__parameters:
24 |     joints:
25 |       - leg_front_r_1
26 |       - leg_front_r_2
27 |       - leg_front_r_3
28 |       - leg_front_l_1
29 |       - leg_front_l_2
30 |       - leg_front_l_3
31 |       - leg_back_r_1
32 |       - leg_back_r_2
33 |       - leg_back_r_3
34 |       - leg_back_l_1
35 |       - leg_back_l_2
36 |       - leg_back_l_3
37 |     interface_name: position
38 | 
39 | imu_sensor_broadcaster:
40 |   ros__parameters:
41 |     frame_id: base_link
42 |     sensor_name: imu_sensor
43 | 


--------------------------------------------------------------------------------
